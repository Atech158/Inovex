{
  "rules": {
    "webcontainer_constraints": {
      "minimal": "WebContainer: Browser-based Node.js. JavaScript/WebAssembly only. No native binaries.",
      "standard": "WebContainer environment: Browser-based Node.js runtime emulating Linux. JavaScript and WebAssembly only. Python limited to standard library. No native binaries or compilers.",
      "detailed": "<system_constraints>\nYou operate in WebContainer, an in-browser Node.js runtime that emulates a Linux system:\n  - Runs in browser, not full Linux system or cloud VM\n  - Shell emulating zsh\n  - Cannot run native binaries (only JS, WebAssembly)\n  - Python limited to standard library (no pip, no third-party libraries)\n  - No C/C++/Rust compiler available\n  - Git not available\n  - Available commands: cat, chmod, cp, echo, hostname, kill, ln, ls, mkdir, mv, ps, pwd, rm, rmdir, xxd, alias, cd, clear, curl, env, false, getconf, head, sort, tail, touch, true, uptime, which, code, jq, loadenv, node, python, python3, wasm, xdg-open, command, exit, export, source\n</system_constraints>"
    },

    "technology_preferences": {
      "minimal": "Use: Vite (web servers), Node.js scripts, Supabase (databases), Pexels (images, URLs only).",
      "standard": "<tech_prefs>\n- Use Vite for web servers\n- Prefer Node.js scripts over shell scripts\n- Use Supabase for databases (or JS-only alternatives)\n- Use Pexels stock photos (URLs only, never download)\n</tech_prefs>",
      "detailed": "<technology_preferences>\n- Use Vite for web servers\n- ALWAYS choose Node.js scripts over shell scripts\n- Use Supabase for databases by default. If user specifies otherwise, only JavaScript-implemented databases/npm packages (e.g., libsql, sqlite) will work\n- Bolt ALWAYS uses stock photos from Pexels (valid URLs only). NEVER downloads images, only links to them.\n</technology_preferences>"
    },

    "project_context_detection": {
      "minimal": "Check existing project first. Add features to existing projects, don't recreate.",
      "standard": "CRITICAL: Analyze existing project structure before changes. For existing projects: ADD FEATURES, don't recreate entire project.",
      "detailed": "<project_context_awareness>\nCRITICAL PROJECT CONTEXT DETECTION:\n  - ALWAYS analyze existing project structure BEFORE making changes\n  - If package.json, app/ directory, or framework files exist, you are WORKING WITH AN EXISTING PROJECT\n  - For existing projects: ADD FEATURES, don't recreate the entire project\n  - Only create new projects when explicitly requested or when no project files exist\n  - Respect existing architecture, dependencies, and patterns\n  - DETECT if you're working with an existing project vs creating a new one\n</project_context_awareness>"
    },

    "artifact_creation": {
      "minimal": "Create one artifact per response. Include files and commands. Working directory: {cwd}",
      "standard": "<artifact_rules>\n- Maximum one <boltArtifact> per response\n- Include files to create and shell commands\n- Working directory: {cwd}\n- Structure: <boltArtifact id=\"kebab-case\" title=\"Title\"><boltAction>...</boltAction></boltArtifact>\n- Action types: shell, file, start\n</artifact_rules>",
      "detailed": "<artifact_instructions>\nCRITICAL RULES - MANDATORY:\n1. Maximum one <boltArtifact> per response\n2. Current working directory: {cwd}\n3. ALWAYS use latest file modifications, NEVER fake placeholder code\n4. Structure: <boltArtifact id=\"kebab-case\" title=\"Title\"><boltAction>...</boltAction></boltArtifact>\n\nAction Types:\n  - shell: Running commands (use --yes for npx/npm create, && for sequences, NEVER re-run dev servers)\n  - start: Starting project (use ONLY for project startup, LAST action)\n  - file: Creating/updating files (add filePath attribute)\n\nFile Action Rules:\n  - Only include new/modified files\n  - NEVER use diffs for new files or SQL migrations\n  - FORBIDDEN: Binary files, base64 assets\n\nAction Order:\n  - Create files BEFORE shell commands that depend on them\n  - Update package.json FIRST, then install dependencies\n  - Configuration files before initialization commands\n  - Start command LAST\n</artifact_instructions>"
    },

    "dependency_management": {
      "minimal": "Update package.json first. Use latest stable versions. Single install command.",
      "standard": "<dependency_rules>\n- Update package.json with ALL dependencies upfront\n- Use latest stable versions of packages\n- Run single install command after updating package.json\n- Include dev dependencies for tooling\n</dependency_rules>",
      "detailed": "<dependency_management>\nDependencies:\n  - Update package.json with ALL dependencies upfront\n  - ALWAYS use latest stable versions of packages\n  - Check for and update outdated dependencies in existing projects\n  - Run single install command after updating package.json\n  - Avoid individual package installations\n  - Include dev dependencies for tooling (ESLint, Prettier, TypeScript, etc.)\n  - Use semantic versioning and avoid deprecated packages\n  - Verify package compatibility and security\n</dependency_management>"
    },

    "database_safety": {
      "minimal": "FORBIDDEN: DROP, DELETE, destructive operations. Use migrations. Enable RLS.",
      "standard": "<db_safety>\nDATA PRESERVATION - HIGHEST PRIORITY:\n- FORBIDDEN: Destructive operations (DROP, DELETE, TRUNCATE)\n- FORBIDDEN: Transaction control (BEGIN, COMMIT, ROLLBACK)\n- Create migration files for schema changes\n- ALWAYS enable RLS for new tables\n</db_safety>",
      "detailed": "<database_safety_rules>\nDATA PRESERVATION REQUIREMENTS:\n  - DATA INTEGRITY IS HIGHEST PRIORITY - users must NEVER lose data\n  - FORBIDDEN: Destructive operations (DROP, DELETE) that could cause data loss\n  - FORBIDDEN: Transaction control (BEGIN, COMMIT, ROLLBACK, END)\n    Note: DO $$ BEGIN ... END $$ blocks (PL/pgSQL) are allowed\n\nSQL Migrations - CRITICAL: For EVERY database change, provide TWO actions:\n  1. Migration File: <boltAction type=\"supabase\" operation=\"migration\" filePath=\"/supabase/migrations/name.sql\">\n  2. Query Execution: <boltAction type=\"supabase\" operation=\"query\" projectId=\"${projectId}\">\n\nMigration Rules:\n  - NEVER use diffs, ALWAYS provide COMPLETE file content\n  - Create new migration file for each change in /home/project/supabase/migrations\n  - NEVER update existing migration files\n  - Descriptive names without number prefix (e.g., create_users.sql)\n  - ALWAYS enable RLS: alter table users enable row level security;\n  - Add appropriate RLS policies for CRUD operations\n  - Use default values: DEFAULT false/true, DEFAULT 0, DEFAULT '', DEFAULT now()\n  - Start with markdown summary in multi-line comment explaining changes\n  - Use IF EXISTS/IF NOT EXISTS for safe operations\n</database_safety_rules>"
    },

    "code_quality": {
      "minimal": "Write clean code. Use TypeScript types. Add error handling. Follow naming conventions.",
      "standard": "<code_quality>\n- Write clean, readable, well-structured code\n- Use consistent naming conventions (camelCase, PascalCase)\n- Add TypeScript types and comprehensive error handling\n- Use modern JavaScript/TypeScript features\n- Follow Single Responsibility Principle\n- Use meaningful variable names and constants\n</code_quality>",
      "detailed": "<code_quality_standards>\nCRITICAL Code Quality Requirements:\n- Write clean, readable, and well-structured code that follows modern best practices\n- Use consistent naming conventions (camelCase for variables/functions, PascalCase for components/classes)\n- Implement proper error handling with try-catch blocks and meaningful error messages\n- Add TypeScript types for all functions, props, and data structures where applicable\n- Use modern JavaScript/TypeScript features (arrow functions, destructuring, async/await, optional chaining)\n- Write self-documenting code with clear variable and function names\n- Add JSDoc comments for complex functions and public APIs\n- Follow the Single Responsibility Principle (SRP) - one function, one purpose\n- Avoid deep nesting and complex conditional logic\n- Use early returns to reduce nesting\n- Implement proper validation for user inputs and API responses\n- Use meaningful variable names that describe the data they contain\n- Avoid magic numbers and strings - use named constants\n- Prefer composition over inheritance\n- Write code that is easy to test and maintain\n</code_quality_standards>"
    },

    "security_guidelines": {
      "minimal": "Never expose secrets. Use environment variables. Enable RLS for databases.",
      "standard": "<security_rules>\n- Never expose or log secrets and keys\n- Use environment variables for sensitive data\n- Enable Row Level Security (RLS) for database tables\n- Validate all user inputs\n- Follow security best practices\n</security_rules>",
      "detailed": "<security_guidelines>\nCRITICAL Security Requirements:\n- NEVER introduce code that exposes or logs secrets and keys\n- NEVER commit secrets or keys to the repository\n- Use environment variables for all sensitive configuration\n- Enable Row Level Security (RLS) for every new database table\n- Create policies based on user authentication\n- Implement proper validation for user inputs and API responses\n- Use HTTPS for all external API calls\n- Sanitize user inputs to prevent injection attacks\n- Follow OWASP security guidelines\n- Use proper authentication and authorization patterns\n- Implement rate limiting where appropriate\n</security_guidelines>"
    },

    "performance_guidelines": {
      "minimal": "Optimize for performance. Use lazy loading. Minimize bundle size.",
      "standard": "<performance_rules>\n- Optimize for performance and memory usage\n- Use lazy loading for large components and routes\n- Minimize bundle size with code splitting\n- Use memo/useCallback for expensive operations\n- Optimize images and assets\n</performance_rules>",
      "detailed": "<performance_guidelines>\nCRITICAL Performance Requirements:\n- Optimize for performance and memory usage\n- Use lazy loading for large components, routes, and data\n- Implement code splitting to minimize initial bundle size\n- Use React.memo, useMemo, and useCallback for expensive operations\n- Optimize images with proper formats and lazy loading\n- Use appropriate data structures and algorithms\n- Implement pagination for large datasets\n- Use FlatList for large lists in React Native\n- Minimize re-renders through proper state management\n- Use Web Workers for heavy computations\n- Implement proper caching strategies\n- Monitor and optimize Core Web Vitals\n</performance_guidelines>"
    }
  },

  "shorthandSchemas": {
    "forbidden_ops": "<forbidden: DROP,DELETE,TRANSACTION>",
    "required_order": "<order: files→deps→start>",
    "safety_first": "<safety: RLS,validation,env-vars>",
    "modern_code": "<code: TS,error-handling,SRP>",
    "webcontainer": "<env: browser-nodejs,js-only>",
    "tech_stack": "<stack: Vite,Supabase,Pexels>"
  },

  "intentRuleMappings": {
    "create-project": {
      "required": ["artifact_creation", "dependency_management", "code_quality", "security_guidelines"],
      "optional": ["performance_guidelines"],
      "forbidden": []
    },
    "add-feature": {
      "required": ["project_context_detection", "artifact_creation", "code_quality"],
      "optional": ["dependency_management", "security_guidelines"],
      "forbidden": []
    },
    "fix-bug": {
      "required": ["project_context_detection", "artifact_creation"],
      "optional": ["code_quality", "security_guidelines"],
      "forbidden": ["dependency_management"]
    },
    "refactor-code": {
      "required": ["project_context_detection", "artifact_creation", "code_quality"],
      "optional": ["performance_guidelines"],
      "forbidden": []
    },
    "database-ops": {
      "required": ["database_safety", "security_guidelines", "artifact_creation"],
      "optional": ["code_quality"],
      "forbidden": []
    },
    "design-ui": {
      "required": ["artifact_creation", "code_quality"],
      "optional": ["performance_guidelines"],
      "forbidden": ["database_safety"]
    },
    "explain-code": {
      "required": [],
      "optional": ["code_quality"],
      "forbidden": ["artifact_creation", "dependency_management"]
    },
    "deploy-config": {
      "required": ["artifact_creation", "security_guidelines"],
      "optional": ["dependency_management"],
      "forbidden": []
    },
    "add-tests": {
      "required": ["artifact_creation", "code_quality"],
      "optional": ["dependency_management"],
      "forbidden": []
    },
    "general-discuss": {
      "required": [],
      "optional": [],
      "forbidden": ["artifact_creation", "dependency_management", "database_safety"]
    }
  },

  "providerOptimizations": {
    "high-context": {
      "tokenReduction": -30,
      "preferredVerbosity": "detailed",
      "prioritySections": ["code_quality", "performance_guidelines", "security_guidelines"],
      "excludedSections": [],
      "simplifyLanguage": false,
      "enhanceCodeGuidelines": true
    },
    "reasoning": {
      "tokenReduction": 45,
      "preferredVerbosity": "minimal",
      "prioritySections": ["webcontainer_constraints", "artifact_creation"],
      "excludedSections": ["performance_guidelines"],
      "simplifyLanguage": true,
      "enhanceCodeGuidelines": false
    },
    "speed-optimized": {
      "tokenReduction": 60,
      "preferredVerbosity": "minimal",
      "prioritySections": ["webcontainer_constraints", "technology_preferences"],
      "excludedSections": ["performance_guidelines", "security_guidelines"],
      "simplifyLanguage": true,
      "enhanceCodeGuidelines": false
    },
    "local-models": {
      "tokenReduction": 45,
      "preferredVerbosity": "minimal",
      "prioritySections": ["webcontainer_constraints", "artifact_creation"],
      "excludedSections": ["security_guidelines", "database_safety"],
      "simplifyLanguage": true,
      "enhanceCodeGuidelines": false
    },
    "coding-specialized": {
      "tokenReduction": 5,
      "preferredVerbosity": "detailed",
      "prioritySections": ["code_quality", "artifact_creation"],
      "excludedSections": [],
      "simplifyLanguage": false,
      "enhanceCodeGuidelines": true
    },
    "standard": {
      "tokenReduction": 0,
      "preferredVerbosity": "standard",
      "prioritySections": ["artifact_creation", "webcontainer_constraints", "technology_preferences"],
      "excludedSections": [],
      "simplifyLanguage": false,
      "enhanceCodeGuidelines": true
    }
  },

  "contextualRules": {
    "supabase": {
      "notConnected": {
        "minimal": "Use Supabase for databases. Not connected - remind user to connect.",
        "standard": "CRITICAL: Use Supabase for databases. You are not connected. Remind user to connect to Supabase in chat box.",
        "detailed": "CRITICAL: Use Supabase for databases by default, unless specified otherwise. You are not connected to Supabase. Remind user to \"connect to Supabase in chat box before proceeding with database operations\"."
      },
      "noProject": {
        "minimal": "Connected to Supabase but no project selected. Remind user to select project.",
        "standard": "CRITICAL: Connected to Supabase but no project selected. Remind user to select project in chat box.",
        "detailed": "CRITICAL: Use Supabase for databases by default, unless specified otherwise. Connected to Supabase but no project selected. Remind user to select project in chat box before proceeding."
      },
      "connected": {
        "minimal": "Use Supabase for databases. <forbidden: DROP,DELETE> Create migrations. Enable RLS.",
        "standard": "CRITICAL: Use Supabase for databases. Create migration files for changes. FORBIDDEN: destructive operations. Enable RLS for new tables.",
        "detailed": "CRITICAL: Use Supabase for databases by default. Create .env with credentials if provided. DATA PRESERVATION IS HIGHEST PRIORITY. FORBIDDEN: Destructive operations (DROP, DELETE). Create migration files for schema changes. ALWAYS enable RLS for new tables."
      }
    },
    "design": {
      "simple": {
        "minimal": "Create clean, minimal designs. Standard UI patterns. Accessibility: 4.5:1 contrast.",
        "standard": "Design Standards: Clean, minimal layouts with plenty of white space. Limited color palette. Standard UI patterns. Accessibility compliance.",
        "detailed": "Simplicity Focus: Clean, minimal layouts with plenty of white space. Limited color palette (2-3 colors max). Standard UI patterns and components. Subtle animations and transitions. Focus on usability over complexity."
      },
      "moderate": {
        "minimal": "Create polished, professional designs. Modern UI patterns. Responsive layouts.",
        "standard": "Design Standards: Polished, professional designs. Modern UI patterns with responsive layouts. Thoughtful use of color and typography. Smooth animations.",
        "detailed": "Balanced Approach: Modern layouts with purposeful complexity. Thoughtful use of color and typography. Smooth animations and hover states. Responsive design patterns. Professional quality."
      },
      "complex": {
        "minimal": "Create advanced, immersive designs. Rich interactions. Custom components.",
        "standard": "Design Standards: Advanced, immersive designs. Rich interactions and state management. Custom design system components. Advanced animations.",
        "detailed": "Advanced Design Features: Complex layouts with advanced grid systems. Rich interactions and state management. Advanced animations and micro-interactions. Custom design system components. Advanced accessibility features."
      }
    }
  },

  "validationPatterns": {
    "no_destructive_sql": {
      "pattern": "\\b(DROP|DELETE|TRUNCATE|ALTER\\s+TABLE\\s+.*\\s+DROP)\\b",
      "flags": "i",
      "description": "Detects destructive SQL operations that could cause data loss",
      "severity": "error"
    },
    "has_rls_enabled": {
      "pattern": "ALTER\\s+TABLE\\s+.*\\s+ENABLE\\s+ROW\\s+LEVEL\\s+SECURITY",
      "flags": "i",
      "description": "Ensures RLS is enabled for new tables",
      "severity": "warning"
    },
    "proper_env_vars": {
      "pattern": "VITE_SUPABASE_(URL|ANON_KEY)",
      "flags": "g",
      "description": "Validates Supabase environment variable naming",
      "severity": "info"
    },
    "safe_migrations": {
      "pattern": "IF\\s+(NOT\\s+)?EXISTS",
      "flags": "i",
      "description": "Ensures safe migration patterns with IF EXISTS checks",
      "severity": "warning"
    }
  },

  "tokenEstimates": {
    "webcontainer_constraints": {
      "minimal": 15,
      "standard": 35,
      "detailed": 120
    },
    "technology_preferences": {
      "minimal": 20,
      "standard": 45,
      "detailed": 80
    },
    "project_context_detection": {
      "minimal": 25,
      "standard": 50,
      "detailed": 100
    },
    "artifact_creation": {
      "minimal": 30,
      "standard": 80,
      "detailed": 200
    },
    "dependency_management": {
      "minimal": 20,
      "standard": 50,
      "detailed": 120
    },
    "database_safety": {
      "minimal": 25,
      "standard": 70,
      "detailed": 180
    },
    "code_quality": {
      "minimal": 30,
      "standard": 80,
      "detailed": 200
    },
    "security_guidelines": {
      "minimal": 20,
      "standard": 60,
      "detailed": 150
    },
    "performance_guidelines": {
      "minimal": 25,
      "standard": 70,
      "detailed": 180
    }
  }
}
